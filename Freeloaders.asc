<p>Concerns are raised every once in a while in the broader free and open source software community about freeloaders.&nbsp; The attitude expressed is that if you're getting the benefit of FOSS, you should contribute.&nbsp; Building a business on a FOSS project you don't own, whether you're providing a service or product around a FOSS project should in return garner some sort of <em>quid pro quo</em>.&nbsp; In reality, freeloaders are desirable.&nbsp;</p>
<p>I think we need to look through the other end of the telescope.&nbsp; The people most often concerned about freeloaders and the free ride are actually the ones with the motivation problem &mdash; they expect free work (or &ldquo;free&rdquo; customers).&nbsp; I recently wrote about &ldquo;<a href="http://www.outercurve.org/Blogs/EntryId/72/Making-Open-Source-Software">Making Open Source</a>&rdquo;.&nbsp; One of the first things required is a <span style="text-decoration: underline;">motivation</span> to share.&nbsp; One of the next requirements is an <span style="text-decoration: underline;">ability</span> to collaborate.&nbsp; I believe the people most likely to express concerns about freeloaders seem to be uncomfortable with the idea of sharing their work.&nbsp; </p>
<p>You almost never see this concern expressed by a company that is participating in a community it doesn't own.&nbsp; They are obviously happy to be contributing and getting more than they give.&nbsp; They are themselves by definition not freeloaders, and clearly the community is evolved enough that they're probably not the only outside contributing company.&nbsp; Likewise, project founders and committers seem to be happy to see others using their work. All these folks already understand the dynamic.&nbsp; One tends to find the freeloader concern expressed by companies that &ldquo;own&rdquo; the open source project.&nbsp;</p>
<p>In a former life as a consultant, I saw companies that own projects raise concerns about contribution and about &ldquo;giving away their software for free.&rdquo;&nbsp; This is really another way of saying, &ldquo;we didn't receive the expected contributions in kind.&rdquo;&nbsp; Worse, there would be discussion about users that didn't convert into customers because this would be the only forgivable reason not to contribute.&nbsp; The thinking was, &ldquo;somebody needs to pay.&rdquo;</p>
<p>Such companies confused customers testing the solution in the user community with genuine community users that aren't convertible leads.&nbsp; The company couldn't initially fathom that developing a community of <span style="text-decoration: underline;">users</span> around a technology project would:&nbsp;
</p>
<ul>
    <li>Create the knowledge, expertise and experience necessary to provide a complete solution for the technology pitch to the customer.&nbsp; These proof points are invaluable when actual potential customers are self-qualifying themselves in the community and testing the strength of a solution&rsquo;s community.</li>
    <li>Create advocates and evangelists to spread awareness about a solution.</li>
    <li>Create enormous inertia in the status quo around a technology they own or provide the dominant expertise around.</li>
    <li>Anchor customers both in an engaged relationship as well as from a technology perspective.</li>
    <li>Ultimately lead to contributions if they encourage and prepare for them.&nbsp; (N.B. This is still not a conversion to a paying customer.)</li>
</ul>
<p>I have even seen a variation on the freeloader phenomenon in relation to the <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013">Google Summer of Code</a>: projects that haven't participated before mistakenly want to get free labour for the summer.&nbsp; The Summer of Code is explicitly designed to enable computer science students to learn about open source software, to gain experience in real-world distributed software development work, and to hone their programming skills.&nbsp; It's about the students &ndash; not the labour.&nbsp; As the tagline says, &ldquo;flip bits not burgers.&rdquo;&nbsp; The FOSS project itself certainly benefits with exposure, training their own project members as mentors, and if the project mentors do a good job, they gain committed new blood.&nbsp; But it's not about &ldquo;getting free work.&rdquo;&nbsp; </p>
<p>It's really about the math of the situation.&nbsp; A number of people have observed over the years that contributions flowing into a FOSS project hold a particular pattern.&nbsp; For every thousand bug reports, a hundred developers will propose a solution in code. &nbsp;Ten will actually read the submission guidelines and fix the entire bug.&nbsp; One will provide a righteous fix and the contributor will have run the test harness provided, and their submission will include new test cases to prove it has been solved.&nbsp; This works for communities with large user bases like MySQL and sendmail right down to very specialized communities around such things as graphics drivers.&nbsp; </p>
<p>These observations set the tone for how to think about the vector, because to get a thousand bug reports, you probably need ten thousand users in your community.&nbsp; If the observations are accurate, 90% of every FOSS community must be users that don't contribute so much as a single bug report, i.e. they're freeloaders.&nbsp;</p>
<p>So, it is really about the project motivation.&nbsp; Developing good software is hard work and liberally sharing the software under FOSS licenses and building a community is the best way to spread the economic costs of development and gain inbound domain expertise.&nbsp; Furthermore, if you're a company that owns the actual IP for the software project, you gain the additional benefits (defined above) around developing an engaged community.&nbsp; </p>
<p>Contribution is the lifeblood of the FOSS project, so it needs to be easy to install/configure and use the software to build a broad community of users.&nbsp; It needs to be easy for users to understand how and what to contribute to improve the odds of contribution.&nbsp; If code is the inbound contribution, it needs to be easy for users to become code contributors.&nbsp; Such people need to know what to do, how to get started, and how to contribute.&nbsp; All of these activities are the project's responsibility.&nbsp; From the contribution flow, a project will find its future committers and maintainers to renew the core development community.&nbsp; </p>
<p>As a project community grows and thrives it will attract businesses that want to use the software and contribute.&nbsp; If the project developers meet the commercial needs for legal risk management, then an ecosystem can thrive around the FOSS project.&nbsp; This adds even more users to the community as companies participate, pulling the project software into new places.&nbsp; </p>
<p>So in the end, it's all about freeloaders, but from the perspective that you want as many as possible.&nbsp; That means you're &ldquo;doing it right&rdquo; in developing a broad base of users by making their experience easy, making it easy for them to contribute, and ultimately to create an ecosystem that continues to sustain itself.&nbsp; Freeloaders are essential to the growth and success of every FOSS project.&nbsp; </p>